# Tools for drawing BPDs
# David Anderson, May 2025.


export draw_bpd, print_all_bpds, print_all_Kbpds


# updated to use integer matrices
# "O" => 0
# "+" => 1
# "/" => 2
# "%" => 3
# "|" => 4
# "-" => 5
# "." => 6
# "*" => 7
# "" => 8
# "o" => 9




"""
    draw_bpd( b::Union{BPD,Drift};
              mode::Symbol=:plots
              saveto::String="none", 
              img_size::Tuple{Int,Int}=(300,300), 
              visible::Bool=true )

Display the bumpless pipedream `b`, and optionally save it to an image file `saveto`.

## Arguments
- `b::BPD`: a BPD
- `mode::Symbol`: either `:plots` or `:ps`, generating an image or LaTeX-compatible PSTricks commands, respectively
- `saveto::String`: the filename, with suffix specifying format.  (E.g., .png, .pdf)  Default is "none" for no file saved.
- `img_size`: an ordered pair specifying the image size.
- `visible::Bool` toggle whether the plot is displayed.  Default to `true`.

## Returns
`plot`: a plot object

## Example
```julia-repl
# Generate a BPD plot
julia> w = [1,4,5,3,2];

julia> b = Rothe(w)

 ╭─────────
 │ □ □ ╭───
 │ □ □ │ ╭─
 │ □ ╭─┼─┼─
 │ ╭─┼─┼─┼─


julia> draw_bpd( b, saveto="bpd1.png" );

# Generate a Drift plot
julia> b = makeflat(b)

 □ □ ╭─────
 □ □ │ ╭───
 □ ╭─╯ │ ╭─
 ╭─╯ ╭─┼─┼─
 │ ╭─┼─┼─┼─


julia> dc = bpd2drift(b);

julia> draw_bpd( dc, saveto="dc1.png" )

# Also displays labeled drift diagrams
julia> dc = markconfig(dc)

julia> draw_bpd( dc, saveto="dc2.png" )
```
"""
function draw_bpd(B::Union{BPD,Drift};
                  saveto::String = "none",
                  mode::Symbol = :plots,
                  kwargs...)

    if mode == :plots
        return _draw_bpd_plots(B; saveto, kwargs...)  # existing code moved to helper
    elseif mode == :ps
        tex = _draw_bpd_pstricks(B; kwargs...)
        saveto != "none" && open(saveto, "w") do io; print(io, tex) end
        return tex
    else
        error("mode must be :plots or :ps")
    end
end


# --- helper ----------------------------------------------------
coord(a,b) = @sprintf("(%.2f,%.2f)", a, b)   # 2 decimals


raw"""
    _draw_bpd_pstricks(B::Union{BPD,Drift}; unit=0.7, show_grid=true)

Return a String containing PSTricks code that draws `B`
in a `\pspicture` whose lower-left corner is (0,0) and whose top-right
corner is (n, n).  
* `unit` rescales everything (LaTeX: `\psset{unit=unit cm}`).
* Set `show_grid=false` to omit the light background grid.
"""
function _draw_bpd_pstricks(B::Union{BPD,Drift}; unit=0.7, show_grid=true)
    n,m = size(B.m)
    io = IOBuffer()

    println(io, "%% Auto-generated by bpd_pstricks()")
    println(io, "\\psset{unit=$(unit)cm,linewidth=0.8pt}")
    println(io, "\\begin{pspicture}(0,0)($(m),$(n))")

    # light grid
    if show_grid
        for k in 1:n-1
            println(io, "\\psline[linecolor=lightgray] (0,$k)($m,$k)")
        end
        for k in 1:m-1
            println(io, "\\psline[linecolor=lightgray] ($k,0)($k,$n)")
        end
    end

    # outer frame
    println(io, "\\psline[linecolor=gray](0,0)($m,0)($m,$n)(0,$n)(0,0)")


# tiles
for i in 1:n, j in 1:m
    y, x = n - i, j - 1          # picture coords
    aa   = B.m[i,j]

    # helper shortcuts
    rect()  = println(io, "\\psframe*[linecolor=orange!30] $(coord(x,y))$(coord(x+1,y+1))")
    vline() = println(io, "\\psline[linecolor=blue] $(coord(x+0.5,y))$(coord(x+0.5,y+1))")
    hline() = println(io, "\\psline[linecolor=blue] $(coord(x,y+0.5))$(coord(x+1,y+0.5))")
    plus()  = (vline(); hline())

    if aa == 0                         # orange box
        rect()
        println(io, "\\psline[linecolor=orange] $(coord(x,y))$(coord(x+1,y))$(coord(x+1,y+1))$(coord(x,y+1))$(coord(x,y))")

    elseif aa == 1                     # "+"
        plus()

    elseif aa == 4                     # "|"
        vline()

    elseif aa == 5                     # "–"
        hline()

    elseif aa == 2 || aa == 3          # elbows
        if aa == 2   # southeast
            println(io,
                "\\psbezier[linecolor=blue] "
                * "$(coord(x+1,y+0.5)) $(coord(x+0.5,y+0.5)) "
                * "$(coord(x+0.5,y+0.5)) $(coord(x+0.5,y))")
        else         # northwest
            println(io,
                "\\psbezier[linecolor=blue] "
                * "$(coord(x,     y+0.5)) $(coord(x+0.5,     y+0.5)) "
                * "$(coord(x+0.5, y+0.5)) $(coord(x+0.5, y+1))")
        end

    elseif aa == 6 || aa == 7          # dot / star
        println(io,
            "\\psdot[linecolor=blue,dotsize=4pt] $(coord(x+0.5,y+0.5))")

    elseif isa(aa, Tuple)              # labeled drift cell
        rect()
        label, red = aa
        col = red ? "red" : "black"
        println(io,
            "\\rput[c]$(coord(x+0.5,y+0.5)){\\textcolor{$col}{$label}}")

        end
    end


    println(io, "\\end{pspicture}")
    return String(take!(io))
end




function _draw_bpd_plots( B::Union{BPD,Drift} ; 
                         saveto::String="none", 
                         img_size::Tuple{Int,Int}=begin
                             n, m = size(B.m)
                             (300, Int(round(300 * n / m)))
                         end, 
                         visible::Bool=true )

    n, m = size(B.m)

    mx = max(m,n)

  # set up plot
    p = plot(; xlim=(0, m), ylim=(0, n), aspect_ratio=:equal, legend=false, grid=true, framestyle=:none, tick_direction=:none, size=img_size)

  # light grid
    for i=1:n-1
      plot!([0,m],[i,i], linecolor=:black, linewidth=.25 )
    end
    for j=1:m-1
      plot!([j,j],[0,n], linecolor=:black, linewidth=.25 )
    end

  # place tiles    
    for i = 1:n
        for j = 1:m
            y, x = n-i, j-1  # Transpose and invert the y-coordinate
            tile!(p, B.m[i, j], x, y )
        end
    end

  # frame it
    plot!(; framestyle=:box, linecolor=:black, linewidth=3, ticks=nothing)

  # save to file
    if  saveto!="none"
      savefig(saveto)
    end

  # display
    if visible
      return p
    end
end




function print_all_bpds(w,fn,fmt)

  i=0

  for b in all_bpds(w)
    i+=1
    _draw_bpd_plots(b,saveto=string(fn,i,fmt),visible=false)
  end

end


function print_flat_bpds(w,fn,fmt)

  i=0

  for b in flat_bpds(w)
    i+=1
    _draw_bpd_plots(ds[i],saveto=string(fn,i,fmt),visible=false)
  end

end


function print_all_Kbpds(w,fn,fmt)

  i=0

  for b in all_Kbpds(w)
    i+=1
    _draw_bpd_plots(b,saveto=string(fn,i,fmt),visible=false)
  end

end



function draw_se_elbow_curve(x1, y1, x3, y3)
    x2, y2 = x3, y1
    t = range(0, stop=1, length=100)
    x_vals = @. (1-t)^2 * x1 + 2*(1-t)*t * x2 + t^2 * x3
    y_vals = @. (1-t)^2 * y1 + 2*(1-t)*t * y2 + t^2 * y3
    return x_vals, y_vals
end

function draw_nw_elbow_curve(x1, y1, x3, y3)
    x2, y2 = x1, y3
    t = range(0, stop=1, length=100)
    x_vals = @. (1-t)^2 * x1 + 2*(1-t)*t * x2 + t^2 * x3
    y_vals = @. (1-t)^2 * y1 + 2*(1-t)*t * y2 + t^2 * y3
    return x_vals, y_vals
end


function tile!(p, aa, xx, yy )
# insert the tile corresponding to entry aa at position (xx,yy) in plot p

  if aa==0  # "O"
    plot!(p,[xx, xx+1, xx+1, xx, xx], [yy, yy, yy+1, yy+1, yy], linecolor=:orange, linewidth=3, seriestype=:shape, fillcolor=:orange, fillalpha=0.4)

  elseif aa==1  # "+"
    plot!(p,[xx+0.5, xx+0.5], [yy, yy+1], linecolor=:blue, linewidth=2)
    plot!(p,[xx, xx+1], [yy+0.5, yy+0.5], linecolor=:blue, linewidth=2)

  elseif aa==4  # "|"
    plot!([xx+0.5, xx+0.5], [yy, yy+1], linecolor=:blue, linewidth=2)

  elseif aa==5  # "-"
    plot!([xx, xx+1], [yy+0.5, yy+0.5], linecolor=:blue, linewidth=2)

  elseif aa==2  # "/"
    x_vals, y_vals = draw_se_elbow_curve(xx+1, yy+0.5, xx+0.5, yy)
    plot!(x_vals, y_vals, linecolor=:blue, linewidth=2)

  elseif aa==3  # "%"
    x_vals, y_vals = draw_nw_elbow_curve(xx+0.5, yy+1, xx, yy+0.5)
    plot!(x_vals, y_vals, linecolor=:blue, linewidth=2)

  elseif aa==6 || aa==7  # "." or "*"
    scatter!([(xx + 0.5)], [(yy + 0.5)], markercolor=:blue, markersize=2, markerstrokewidth=0)

  elseif isa(aa, Tuple)
    plot!([xx, xx+1, xx+1, xx, xx], [yy, yy, yy+1, yy+1, yy], linecolor=:orange, linewidth=2, seriestype=:shape, fillcolor=:orange, fillalpha=0.3)
    if aa[2]
      annotate!([(xx + 0.5, yy + 0.5, text(string(aa[1]), :center, 10, :red))])
    else
      annotate!([(xx + 0.5, yy + 0.5, text(string(aa[1]), :center, 10))])
    end
  end

  if aa==7
    plot!([x, x+1, x+1, x, x], [y, y, y+1, y+1, y], linecolor=:orange, linewidth=2, seriestype=:shape, fillalpha=0)
  end

end



